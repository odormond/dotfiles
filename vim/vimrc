" Environment
set nocompatible
scriptencoding utf-8
set termencoding=utf-8
set encoding=utf-8

" Directories for various vim support files
silent execute '!mkdir -p $HOME/.vim/tmp/{backup,swap,view,undo}'
set backupdir=~/.vim/tmp/backup/
set backup
set directory=~/.vim/tmp/swap/
set viewdir=~/.vim/tmp/view/
set undodir=~/.vim/undo
set undofile
set viminfo=!,'100,<50,s10,h,n~/.vim/tmp/viminfo
set cryptmethod=blowfish2

" Easier to reach <Leader>
let mapleader=","
let maplocalleader=mapleader " Same char for buffer local leader

" Editing
set expandtab
set tabstop=4
set shiftwidth=4
"set fileencodings=utf-8
set nojoinspaces
set nostartofline
set autoindent
function! InjectGitBranch(type, ...)
  let sel_save = &selection
  let &selection = "inclusive"
  let reg_save = @@

  let branch = b:buffer_vcs_config['git']['branch']
  echomsg "arg: " . a:0 . " type: " . a:type
  if a:0  " Invoked from visual mode
    silent exe "normal! gvc" . branch
  elseif a:type == 'line'
    silent exe "normal! '[V']c" . branch
  else
    silent exe "normal! `[v`]c" . branch
  endif

  let &selection = sel_save
  let @@ = reg_save
endfunction
nmap <Leader>b :set opfunc=InjectGitBranch<CR>g@
xmap <Leader>b :<C-U>call InjectGitBranch(visualmode(), 1)<CR>

" Visuals
set visualbell
set title
set foldmethod=syntax
set foldenable
set foldlevel=99
set foldtext=MyFoldText()
function! MyFoldText()
  let line = getline(v:foldstart)
  let space = substitute(line, '\s\?\S.*', '', '')
  let indent = substitute(substitute(line, '\s\?\S.*', '', ''), '\s', '-', 'g')
  let text = substitute(line, '^\s*', '', '')
  let n_lines = v:foldend - v:foldstart + 1
  if indent != ''
    let indent = indent . ' '
  endif
  return printf("%s%s (%d lines)", indent, text, n_lines)
endfunction
syntax on " Before setting colorscheme because it reset colors
set number
set relativenumber
set numberwidth=3
set modelines=5
set modeline
set noshowmode
set showcmd

"" search improvements
set incsearch
set hlsearch  " hide highlighting with :nohls instead of unsetting it
"nnoremap <silent> n n:call HLNext(0.01, 2)<cr>
"nnoremap <silent> N N:call HLNext(0.01, 2)<cr>
"function! HLNext (blinktime, count)
"  let [bufnum, lnum, col, off] = getpos('.')
"  let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
"  let target_pat = '\c\%#'.@/
"  let counter = a:count
"  while counter
"    let ring = matchadd('SearchHl', target_pat, 101)
"    redraw
"    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
"    call matchdelete(ring)
"    redraw
"    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
"    let counter -= 1
"  endwhile
"endfunction
" command line completion improvements
set wildmenu
set wildmode=longest:full,full
set wildignore=*.pyc,*.pyo,__pycache__
set wildignore+=*.o,*.a,*.la,*.so
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,*.tiff,*.pdf
set wildignore+=*.tar,*.gz,*.bz2
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*

""" file / buffer navigation
" automaticallly search bellow the current directory
set path+=**
" always make the directory containing the edited file the current dir. Follows focus.
"set autochdir
" edit file under the cursor in a vertical split
nnoremap gf :vertical wincmd f<CR>
" list buffer and prompt
nnoremap § :ls<CR>:b 
" switch to alternate buffer in same window
nnoremap <BS> <C-^>
" netrw tunning
let g:netrw_banner=0
let g:netrw_liststyle=3
let g:netrw_browse_split=4
let g:netrw_altv=1
let g:netrw_winsize=25

"set list
set listchars=eol:↵,tab:⇥\ ,trail:⏘,extends:⇢,precedes:⇠,conceal:\ ,nbsp:⏙
"set showbreak=↪ " For consistency with list mode but useless due to numberline
set ttyfast " should always be true nowadays
"set lazyredraw
set ruler
set splitbelow splitright
set shortmess=afilmnrxoOtT
set backspace=indent,eol,start
set spelllang=en_gb,fr
set shiftround
set timeoutlen=300
set ttimeoutlen=50

" Line wrapping display tunning
set nowrap
set linebreak
set breakindent
set breakindentopt=min:20,shift:8

set synmaxcol=256 " Don't look to far away for syntax highlighting. Will speed things up.
set colorcolumn=100,200
colorscheme odie


" Diff
set diffopt+=iwhite,vertical

" Window navigation
" ^l is redefined from the default mapping meaning to clear and redraw the screen.
" These are redefined in tmux to allow transparent movements between tmux panes and vim windows
"nnoremap <C-h> <C-w>h
"nnoremap <C-j> <C-w>j
"nnoremap <C-k> <C-w>k
"nnoremap <C-l> <C-w>l
nnoremap <C-w>1 1<C-w><C-w>
nnoremap <C-w>2 2<C-w><C-w>
nnoremap <C-w>3 3<C-w><C-w>
nnoremap <C-w>4 4<C-w><C-w>
nnoremap <C-w>5 5<C-w><C-w>
nnoremap <C-w>6 6<C-w><C-w>
nnoremap <C-w>7 7<C-w><C-w>
nnoremap <C-w>8 8<C-w><C-w>
nnoremap <C-w>9 9<C-w><C-w>

" Window spliting
nnoremap <C-w>" :vsplit<cr>
nnoremap <C-w>= :split<cr>

" regular shape for visual block
set virtualedit=block

" easier alteration of indentation of code blocks by keeping the visual selection alive
vnoremap < <gv
vnoremap > >gv

" don't override the yanked text by the replaced one
xnoremap p pgvy

" Search uses classical regexes instead of vim ones
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v

" complement pair matching:
set matchpairs+="<:>,«:»"

" Avoid moving so far away
inoremap jk <Esc>
inoremap kj <Esc>
" enforce forgetting about the cursor keys
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>
inoremap <Up> <nop>
inoremap <Down> <nop>
inoremap <Left> <nop>
inoremap <Right> <nop>

" quick toggle of paste mode
nmap <Leader>o :set paste!<cr>

" Block dragging and dupplication
vmap  <expr>  <Left>   DVB_Drag('left')
vmap  <expr>  <Right>  DVB_Drag('right')
vmap  <expr>  <Down>   DVB_Drag('down')
vmap  <expr>  <Up>     DVB_Drag('up')
vmap  <expr>  D        DVB_Duplicate()
" remove any introduced trailing whitespace after moving
let g:DVB_TrimWS = 1

" Show changes made to the current buffer that are not saved yet.
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis

augroup vimrc
  autocmd!

  " automatically reload vimrc when it's saved
  au BufWritePost .vimrc so ~/.vim/vimrc
  au BufWritePost vimrc so ~/.vim/vimrc
  
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

" personal quick help
function! PersonalHelp()
  let filename=findfile("personal.hlp", &runtimepath)
  if filereadable(filename)
    echo join(readfile(filename), "\n")
  endif
endfunction
nmap <Leader>? :call PersonalHelp()<cr>

" Toggle showmarks and number to allow copying text
let s:colorcolumn = &colorcolumn
function! ColorColumnToggle()
  if &colorcolumn == ""
    exe "set colorcolumn=" . s:colorcolumn
  else
    set colorcolumn=
  endif
endfunction
function! ToggleFancies()
  silent SyntasticToggleMode
  GitGutterSignsToggle
  IndentLinesToggle
  call ColorColumnToggle()
  set number!
  set relativenumber!
endfunction
nmap <Leader>, :call ToggleFancies()<cr>

" Specify a directory for plugins
call plug#begin('~/.vim/plugged')

"====== improve netrw ======
Plug 'tpope/vim-vinegar'

"====== python completion with jedi ======
set completeopt=menuone,longest
let g:jedi#use_tabs_not_buffers=0
let g:jedi#use_splits_not_buffers="bottom"
let g:jedi#auto_vim_configuration=0  " Don't mess with my vim config
let g:jedi#smart_auto_mappings=0 " With this automatically insert the 'import' after typing 'from bla<space>'
let g:jedi#show_call_signatures=1
Plug 'davidhalter/jedi-vim'

"====== use the tab key for completion ======
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabContextDefaultCompletionType = "<c-n>"
let g:SuperTabLongestEnhanced=1
let g:SuperTabLongestHighlight=1
let g:SuperTabCrMapping=1
Plug 'ervandew/supertab'

"====== code structure identification and navigation ======
nnoremap <Leader>t :TagbarToggle<cr>
nnoremap <Leader>tt :TagbarOpen fj<cr>
Plug 'majutsushi/tagbar'

"====== Window zooming ======
nmap <Leader>z <Plug>(zoom-toggle)
Plug 'dhruvasagar/vim-zoom'

"====== Fancy status line with airline =====
set laststatus=2
let g:airline_theme="odie"
let g:airline_powerline_fonts=1
let g:airline_inactive_collapse=0
let g:airline#extensions#hunks#enabled=1
let g:airline#extensions#tagbar#enabled=1
let g:airline#extensions#tagbar#flags='f'
let g:airline#extensions#branch#enabled=1
let g:airline#extensions#branch#use_vcscommand=0
function! s:setup_airline()
  let g:airline_section_c=airline#section#create_left(['file', 'readonly', 'tagbar'])
  let g:airline_section_x=airline#section#create(['filetype'])
  let g:airline_section_z=airline#section#create([' %{winnr()}β%{bufnr("%")} ', 'windowswap', '%3p%% ', 'linenr', ':%3v '])
endfunction
autocmd User AirlineAfterInit call s:setup_airline()
Plug 'vim-airline/vim-airline'

"====== hunk managment with fugitive ======
Plug 'tpope/vim-fugitive'

"====== extend fugitive with a nice TUI to manage branches ======
Plug 'idanarye/vim-merginal'

"====== git staging management ======
Plug 'jreybert/vimagit'

"====== change marker with gitgutter ======
Plug 'airblade/vim-gitgutter'

"====== advanced text object for blocks delimited by (), {}, [], '', "", <>
Plug 'kana/vim-textobj-user'  " dependency of vim-textobj-anyblock
Plug 'rhysd/vim-textobj-anyblock'

"====== surround operation ======
Plug 'kana/vim-operator-user'  " dependency of vim-operator-surround
Plug 'rhysd/vim-operator-surround'
map <silent>sa <Plug>(operator-surround-append)
map <silent>sd <Plug>(operator-surround-delete)
map <silent>sr <Plug>(operator-surround-replace)

"====== simplify unicode character input and info query ======
Plug 'chrisbra/unicode.vim'

"====== syntax checking with syntastic ======
let g:syntastic_check_on_open=1
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ["flake8"]
"let g:syntastic_cursor_columns = 0
Plug 'vim-syntastic/syntastic'

"====== square brackets shortcuts for paired commands ======
Plug 'tpope/vim-unimpaired'

"====== show indentation level with thin marker for space based indentation ======
let g:indentLine_char='┊' " or: ╵╷│┆|¦
let g:indentLine_color_term=235
Plug 'Yggdroot/indentLine'

"====== vim tmux navigator, seamless navigation between vim splits and tmux panes ======
let g:tmux_navigator_no_mappings = 1
let g:tmux_navigator_disable_when_zoomed = 1
Plug 'christoomey/vim-tmux-navigator'
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-w><C-w> :TmuxNavigatePrevious<cr>

" Add plugins to &runtimepath
call plug#end()

" vim:ts=2:sw=2
