vim9script
set runtimepath+=/Users/odie/Devel/python/vpdb

# Environment
set nocompatible
scriptencoding utf-8
set termencoding=utf-8
set encoding=utf-8

# Directories for various vim support files
silent execute '!mkdir -p $HOME/.vim/tmp/{backup,swap,view,undo}'
set backupdir=~/.vim/tmp/backup/
set backup
set directory=~/.vim/tmp/swap/
set viewdir=~/.vim/tmp/view/
set undodir=~/.vim/undo
set undofile
set viminfo=!,'100,<50,s10,h,n~/.vim/tmp/viminfo
set cryptmethod=blowfish2

# Easier to reach <Leader>
g:mapleader = ","
g:maplocalleader = " "

# Editing
set hidden
set expandtab
set tabstop=4
set shiftwidth=4
#set fileencodings=utf-8
set nojoinspaces
set nostartofline
set autoindent
def InjectGitBranch(mode: string, is_visual=false)
  var sel_save = &selection
  &selection = "inclusive"
  var reg_save = getreginfo()

  var branch = b:buffer_vcs_config['git']['branch']
  if is_visual
    # Invoked from visual mode
    exe "normal! c" .. branch
  elseif mode == 'line'
    exe "normal! '[V']c" .. branch
  else
    exe "normal! `[v`]c" .. branch
  endif

  &selection = sel_save
  setreg(v:register, reg_save)
enddef
nnoremap <Leader>b <ScriptCmd>set opfunc=InjectGitBranch<CR>g@
xnoremap <Leader>b <ScriptCmd>InjectGitBranch(visualmode(), true)<CR>

# Visuals
set visualbell
set title
set foldmethod=syntax
set foldenable
set foldlevel=99
set foldtext=MyFoldText()
def MyFoldText(): string
  var line = getline(v:foldstart)
  var space = substitute(line, '\s\?\S.*', '', '')
  var indent = substitute(substitute(line, '\s\?\S.*', '', ''), '\s', '-', 'g')
  var text = substitute(line, '^\s*', '', '')
  var n_lines = v:foldend - v:foldstart + 1
  if indent != ''
    indent = indent .. ' '
  endif
  return printf("%s%s (%d lines) ", indent, text, n_lines)
enddef
syntax on # Before setting colorscheme because it reset colors
set number
set relativenumber
set numberwidth=3
set modelines=5
set modeline
set noshowmode
set showcmd
if has("patch-8.1.1564")
  set signcolumn=number
else
  set signcolumn=yes
endif

# Enable advanced styling like double / dotted / dashed underline and undercurl
set t_Us=[4:2m  # double underline
set t_Cs=[4:3m  # curly underline
set t_ds=[4:4m  # dotted underline (required Ubuntu 24.04 / libvte 0.76+)
set t_Ds=[4:5m  # dashed underline (required Ubuntu 24.04 / libvte 0.76+)
set t_Ce=[4:0m  # end * underline
set t_AU=[58;5;%dm  # set * underline colour
set t_Ts=[9m  # strikethrough start
set t_Te=[29m  # strikethrough end


## search improvements
set incsearch
set hlsearch  # hide highlighting with :nohls instead of unsetting it
nnoremap <Leader>- :nohls<cr>
#nnoremap <silent> n n:call HLNext(0.01, 2)<cr>
#nnoremap <silent> N N:call HLNext(0.01, 2)<cr>
#function! HLNext (blinktime, count)
#  let [bufnum, lnum, col, off] = getpos('.')
#  let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
#  let target_pat = '\c\%#'.@/
#  let counter = a:count
#  while counter
#    let ring = matchadd('SearchHl', target_pat, 101)
#    redraw
#    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
#    call matchdelete(ring)
#    redraw
#    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
#    let counter -= 1
#  endwhile
#endfunction
# command line completion improvements
set wildmenu
set wildmode=longest:full,full
set wildignore=*.pyc,*.pyo,__pycache__
set wildignore+=*.o,*.a,*.la,*.so
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,*.tiff,*.pdf
set wildignore+=*.tar,*.gz,*.bz2
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*

### file / buffer navigation
# automaticallly search bellow the current directory
set path+=**
# always make the directory containing the edited file the current dir. Follows focus.
#set autochdir
# edit file under the cursor in a vertical split
nnoremap gf :vertical wincmd f<CR>
# switch to alternate buffer in same window
nnoremap <BS> <C-^>

#set list
set listchars=space:␣,eol:↵,tab:⇥\ ,trail:␣,extends:⇢,precedes:⇠,conceal:\ ,nbsp:⏙
#set showbreak=↪ # For consistency with list mode but useless due to numberline
set ttyfast # should always be true nowadays
#set lazyredraw
set ruler
set splitbelow splitright
set shortmess=filmnrwxoOtTc
#flag	meaning when present
#  f	use "(3 of 5)" instead of "(file 3 of 5)"
#  i	use "[noeol]" instead of "[Incomplete last line]"
#  l	use "999L, 888B" instead of "999 lines, 888 bytes"
#  m	use "[+]" instead of "[Modified]"
#  n	use "[New]" instead of "[New File]"
#  r	use "[RO]" instead of "[readonly]"
#  w	use "[w]" instead of "written" for file write message
#	    and "[a]" instead of "appended" for ':w >> file' command
#  x	use "[dos]" instead of "[dos format]", "[unix]" instead of
#	    "[unix format]" and "[mac]" instead of "[mac format]".
#  o	overwrite message for writing a file with subsequent message
#	    for reading a file (useful for ":wn" or when 'autowrite' on)
#  O	message for reading a file overwrites any previous message.
#	    Also for quickfix message (e.g., ":cn").
#  t	truncate file message at the start if it is too long to fit
#	    on the command-line, "<" will appear in the left most column.
#  T	truncate other messages in the middle if they are too long to
#	    fit on the command line.  "..." will appear in the middle.
#  c	don't give |ins-completion-menu| messages.  For example,
#	    "-- XXX completion (YYY)", "match 1 of 2", "The only match",
#	    "Pattern not found", "Back at original", etc.
set backspace=indent,eol,start
set spelllang=en_gb,fr
set shiftround
set timeoutlen=500
set ttimeoutlen=50

# Line wrapping display tunning
set nowrap
set linebreak
set breakindent
set breakindentopt=min:20,shift:8

set synmaxcol=256 # Don't look to far away for syntax highlighting. Will speed things up.
set colorcolumn=100,200
colorscheme odie # Disable for light background
# set bg=light


# Diff
set diffopt+=iwhite,vertical

# Window navigation
# ^l is redefined from the default mapping meaning to clear and redraw the screen.
# These are redefined in tmux to allow transparent movements between tmux panes and vim windows
#nnoremap <C-h> <C-w>h
#nnoremap <C-j> <C-w>j
#nnoremap <C-k> <C-w>k
#nnoremap <C-l> <C-w>l
nnoremap <C-w>1 1<C-w><C-w>
nnoremap <C-w>2 2<C-w><C-w>
nnoremap <C-w>3 3<C-w><C-w>
nnoremap <C-w>4 4<C-w><C-w>
nnoremap <C-w>5 5<C-w><C-w>
nnoremap <C-w>6 6<C-w><C-w>
nnoremap <C-w>7 7<C-w><C-w>
nnoremap <C-w>8 8<C-w><C-w>
nnoremap <C-w>9 9<C-w><C-w>

# Window spliting
nnoremap <Leader>= :vsplit<cr>
nnoremap <Leader>" :split<cr>

# regular shape for visual block
set virtualedit=block

# easier alteration of indentation of code blocks by keeping the visual selection alive
vnoremap < <gv
vnoremap > >gv

# don't override the yanked text by the replaced one
xnoremap p pgvy

# Search uses classical regexes instead of vim ones
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v

# complement pair matching:
set matchpairs+=<:>,«:»

# Avoid moving so far away
inoremap jk <Esc>
inoremap kj <Esc>
# enforce forgetting about the cursor keys
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>
inoremap <Up> <nop>
inoremap <Down> <nop>
inoremap <Left> <nop>
inoremap <Right> <nop>

# quick toggle of paste mode
nnoremap <Leader>o :set paste!<cr>

# Quickfix shorthand
nnoremap <Leader>m :make<cr>
nnoremap <Leader>< :cprev<cr>
nnoremap <Leader>> :cnext<cr>

# Block dragging and dupplication
vnoremap <Left>   <ScriptCmd>g:DVB_Drag('left')<CR>
vnoremap <Right>  <ScriptCmd>g:DVB_Drag('right')<CR>
vnoremap <Down>   <ScriptCmd>g:DVB_Drag('down')<CR>
vnoremap <Up>     <ScriptCmd>g:DVB_Drag('up')<CR>
vnoremap D        <ScriptCmd>g:DVB_Duplicate()<CR>
# remove any introduced trailing whitespace after moving
g:DVB_TrimWS = true

# Show changes made to the current buffer that are not saved yet.
command! DiffOrig vert new | set bt=nofile | r \# | 0d_ | diffthis | wincmd p | diffthis

augroup vimrc
  autocmd!

  # automatically reload vimrc when it's saved
  au BufWritePost .vimrc so ~/.vim/vimrc
  au BufWritePost vimrc so ~/.vim/vimrc

  # When editing a file, always jump to the last known cursor position.
  # Don't do it when the position is invalid or when inside an event handler
  # (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  # Detect hcl files and treat them as tf files
  autocmd BufNewFile,BufRead *.hcl setfiletype tf
augroup END

# personal quick help
def PersonalHelp()
  var filename = findfile("personal.hlp", &runtimepath)
  if filereadable(filename)
    echo join(readfile(filename), "\n")
  endif
enddef
nnoremap <Leader>? <ScriptCmd>PersonalHelp()<CR>

# Toggle showmarks and number to allow copying text
var saved_colorcolumn = &colorcolumn
def ColorColumnToggle()
  if &colorcolumn == ""
    #exe "set colorcolumn=" .. colorcolumn
    &colorcolumn = saved_colorcolumn
  else
    saved_colorcolumn = &colorcolumn
    &colorcolumn = ""
  endif
enddef
def ToggleFancies()
  GitGutterSignsToggle
  IndentLinesToggle
  ColorColumnToggle()
  set number!
  set relativenumber!
enddef
nnoremap <Leader><Leader> <ScriptCmd>ToggleFancies()<CR>

# Workaround fun with sys.executable pointing to vim itself on macOS
if has('osxdarwin')
  py3 import os, sys; sys.executable = os.path.join(sys.prefix, 'bin', 'python{}.{}'.format(*sys.version_info[:2]))
endif

# Load optional builtin packages
packadd! comment
packadd! helptoc
packadd! matchit

# Specify a directory for plugins
plug#begin('~/.vim/plugged')

#====== use NERDtree instead of netrw ======
g:loaded_netrw = 1
g:loaded_netrwPlugin = 1
nnoremap <Leader>no :NERDTreeVCS %:h<cr>
nnoremap <Leader>nc :NERDTreeClose<cr>
Plug 'preservim/nerdtree'

#====== code structure identification and navigation ======
nnoremap <Leader>to :TagbarOpen fj<cr>
nnoremap <Leader>tc :TagbarClose<cr>
au BufEnter __Tagbar__.* nnoremap <buffer> <esc> :wincmd p<cr>
g:tagbar_left = 1
g:tagbar_zoomwidth = 0
g:tagbar_compact = 1
g:tagbar_indent = 2
g:tagbar_show_visibility = 0
g:tagbar_previewwin_pos = "belowright"
Plug 'majutsushi/tagbar'

#====== Window zooming ======
nnoremap <Leader>z <Plug>(zoom-toggle)
Plug 'dhruvasagar/vim-zoom'

#====== Window swaping ======
Plug 'wesQ3/vim-windowswap'

#====== Fancy status line with airline =====
set laststatus=2
g:airline_theme = "odie"
g:airline_powerline_fonts = 1
g:airline#extensions#branch#use_vcscommand = 0
g:airline#extensions#branch#displayed_head_limit = 11
g:airline#extensions#hunks#non_zero_only = 1
g:airline#extensions#searchcount#enabled = 0
g:airline#extensions#tagbar#flags = 'f'
g:airline#parts#ffenc#skip_expected_string = 'utf-8[unix]'
def Setup_airline()
  g:airline_section_c = airline#section#create_left(['file', 'readonly', 'tagbar'])
  g:airline_section_x = airline#section#create(['filetype'])
  g:airline_section_y = airline#section#create(['ffenc', 'windowswap'])
  g:airline_section_z = airline#section#create(['%3p%% ', 'linenr', ':%3v [%{winnr()}]'])
enddef
autocmd User AirlineAfterInit Setup_airline()
Plug 'vim-airline/vim-airline'

#====== make . support some more plugin mapping ======
Plug 'tpope/vim-repeat'

#====== square brackets shortcuts for paired commands ======
Plug 'tpope/vim-unimpaired'

#====== hunk managment with fugitive ======
Plug 'tpope/vim-fugitive'
def Git_graph()
  var buf_nr = bufadd("git graph")
  var win_nr = bufwinnr(buf_nr)
  if win_nr == -1
    exe buf_nr .. 'buffer'
  else
    exe win_nr .. 'wincmd w'
  endif
  setlocal buftype=nofile bufhidden=hide nobuflisted noswapfile nomodified modifiable
  silent exe '%delete'
  silent read !git graph
  normal ggdd
  setlocal nomodifiable filetype=git
  syntax match gitGraphTree /^[*|\/\\ ]\+/ nextgroup=gitGraphHash
  syntax match gitGraphHash /\<\x\{4,\}\>/ nextgroup=gitGraphDecoration
  syntax match gitGraphDecoration /\(\<\x\{4,\}\> \)\@<=(.\{-})/ms=s+1,me=e-1
  syntax match gitGraphLocalBranch /[-0-9a-zA-Z_/]\+/ contained containedin=gitGraphDecoration
  syntax match gitGraphRemoteBranch /origin\/[-0-9a-zA-Z_/]\+/ contained containedin=gitGraphDecoration
  syntax match gitGraphHEAD /HEAD -> / contained containedin=gitGraphDecoration
  syntax match gitGraphTag /tag: [^)]\+/ contained containedin=gitGraphDecoration
  highlight gitGraphTree ctermfg=Blue
  highlight gitGraphHash ctermfg=Brown
  highlight gitGraphHEAD ctermfg=Cyan
  highlight gitGraphLocalBranch ctermfg=Green
  highlight gitGraphRemoteBranch ctermfg=Red
  highlight gitGraphTag ctermfg=Yellow
enddef
command Gg Git_graph()
#syn match gitGraphLine /[*|]/

autocmd User BufReadPost */COMMIT_EDITMSG normal gg0

#====== git branch viewer for fugitive ======
Plug 'rbong/vim-flog'

#====== (un)comment stuff out ======
Plug 'tpope/vim-commentary'

#====== direct interaction with tmux, particularly buffers ======
Plug 'tpope/vim-tbone'

#====== increment/decrement date, time, ... and not just numbers ======
Plug 'tpope/vim-speeddating'

#====== extend fugitive with a nice TUI to manage branches ======
Plug 'idanarye/vim-merginal'

#====== change marker with gitgutter ======
Plug 'airblade/vim-gitgutter', { 'branch': 'main' }
highlight SignColumn ctermbg=NONE guibg=NONE
nnoremap ]h <Plug>(GitGutterNextHunk)
nnoremap [h <Plug>(GitGutterPrevHunk)
onoremap ih <Plug>(GitGutterTextObjectInnerPending)
onoremap ah <Plug>(GitGutterTextObjectOuterPending)
xnoremap ih <Plug>(GitGutterTextObjectInnerVisual)
xnoremap ah <Plug>(GitGutterTextObjectOuterVisual)

#====== advanced text object for blocks delimited by (), {}, [], '', "", <>
Plug 'kana/vim-textobj-user'  # dependency of vim-textobj-anyblock
Plug 'rhysd/vim-textobj-anyblock'

#====== simplify unicode character input and info query ======
Plug 'chrisbra/unicode.vim'

#====== show indentation level with thin marker for space based indentation ======
g:indentLine_char = '┊' # or: ╵╷│┆|¦
if get(hlget("Normal")[0], "ctermbg", 255) == '0'
  g:indentLine_color_term = 237  # For dark background
else
  g:indentLine_color_term = 254  # For light background
endif

Plug 'Yggdroot/indentLine'

#====== vim tmux navigator, seamless navigation between vim splits and tmux panes ======
g:tmux_navigator_no_mappings = 1
g:tmux_navigator_disable_when_zoomed = 1
Plug 'christoomey/vim-tmux-navigator'
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
#nnoremap <silent> <C-w><C-w> :TmuxNavigatePrevious<cr>

#====== fuzzy file/buffer switching ======
g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:20'
Plug 'ctrlpvim/ctrlp.vim'
nnoremap <silent> § :CtrlPBuffer<cr>

#===== Python coverage highlighting ======
Plug 'mgedmin/coverage-highlight.vim'
highlight NoCoverage ctermbg=234
highlight NoBranchCoverage ctermbg=234
highlight NoBranchCoverageTarget ctermbg=234
nnoremap <leader>c :ToggleCoverage<CR>
nnoremap <leader>[ :PrevUncovered<CR>
nnoremap <leader>] :NextUncovered<CR>

#====== sandwiched text operation =====
Plug 'machakann/vim-sandwich'
g:sandwich_no_default_key_mappings = 1

nmap za <Plug>(sandwich-add)
xmap za <Plug>(sandwich-add)
omap za <Plug>(sandwich-add)
nmap zd <Plug>(sandwich-delete)
xmap zd <Plug>(sandwich-delete)
nmap zdb <Plug>(sandwich-delete-auto)
nmap zr <Plug>(sandwich-replace)
xmap zr <Plug>(sandwich-replace)
nmap zrb <Plug>(sandwich-replace-auto)

#===== peek at registers =====
Plug 'junegunn/vim-peekaboo'

#===== lsp =====
Plug 'yegappan/lsp'

#===== Add plugins to &runtimepath
plug#end()

var lspOpts = {
  #autoComplete: false,
  autoHighlight: true,
  autoHighlightDiags: true,
  completionMatcher: "fuzzy",
  showDiagInPopup: false,
  showDiagOnStatusLine: true,
  useBufferCompletion: true,
}
autocmd User LspSetup call LspOptionsSet(lspOpts)

def JedilsWorkspace(): dict<string>
  if $VIRTUAL_ENV != ""
    return {}  # A virtualenv is active so let jedi lsp auto detection do the work
  endif
  silent system("python3 -c'import sys; sys.exit(1 if sys.prefix != sys.base_prefix else 0)'")
  if v:shell_error != 0
    # The python on PATH is from a virtualenv so let jedi lsp auto detection do the work
    return {}
  endif
  var dot_venv = finddir(".venv", "**0;")  # Black magic: search only current directory and all parents
  if dot_venv != ""
    var executable = glob(dot_venv .. "/bin/python")
    if executable != ""
      return {environmentPath: dot_venv}
    endif
  endif
  var hatch_status = system("hatch status 2>&1")
  if matchstr(hatch_status, "\\[Project] - \\(<no project detected>\\)\\@!") != ""
    # Hatch knows about a project, explicitly tell jedi lsp to use its python
    silent var hatch_envs = keys(json_decode(system("hatch env show --json")))
    for venv in ["test", "dev", "default", hatch_envs[0]]
      if index(hatch_envs, venv) != -1
        var env_path = trim(system("hatch env find " .. venv))
        var executable = glob(env_path .. "/bin/python")
        if executable != ""
          return {environmentPath: env_path}
        endif
      endif
    endfor
  endif
  # Fallback to jedi lsp auto detection
  return {}
enddef

var lspServers = [
  {
    name: 'bashls',
    filetype: 'sh',
    path: 'bash-language-server',
    args: ['start'],
  },
  {
    name: 'ruffls',
    filetype: 'python',
    path: 'ruff',
    args: ["server"],
    features: {
      hover: false,
    },
  },
  {
    name: 'jedils',
    filetype: 'python',
    path: 'jedi-language-server',
    args: [],
    initializationOptions: {
      workspace: JedilsWorkspace(),
    },
  },
  {
    name: 'vimls',
    filetype: 'vim',
    path: 'vim-language-server',
    args: ['--stdio'],
  },
]
autocmd User LspSetup call LspAddServer(lspServers)

nnoremap <silent> <localleader>d :LspGotoDefinition<CR>
nnoremap <silent> <localleader>dv :vertical LspGotoDefinition<CR>
nnoremap <silent> <localleader>dh :horizontal LspGotoDefinition<CR>
nnoremap <silent> <localleader>i :LspGotoImpl<CR>
nnoremap <silent> <localleader>iv :vertical LspGotoImpl<CR>
nnoremap <silent> <localleader>ih :horizontal LspGotoImpl<CR>
nnoremap <silent> <localleader>sd :LspPeekDefinition<CR>
nnoremap <silent> <localleader>si :LspPeekImpl<CR>
nnoremap <silent> <localleader>sr :LspPeekReferences<CR>
nnoremap <silent> <localleader>ss :LspShowSignature<CR>
nnoremap <silent> <localleader><BS> :LspHighlightClear<CR>
nnoremap <silent> <localleader>a :LspCodeAction<CR>
nnoremap <silent> K :LspHover<CR>

def CheckBackSpace(): bool
  var col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
enddef
inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : CheckBackSpace() ? "\<Tab>" : "\<C-x>\<C-o>"
inoremap <silent><expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<S-Tab>"

# Python tooling
g:python_indent = {
  continue: 'shiftwidth()',
  open_paren: 'shiftwidth()',
  closed_paren_align_last_line: false,
}

def ShowRuffRule(): void
  var diag = lsp#diag#GetDiagByPos(bufnr(), line('.'), charcol('.'))
  if !diag->empty() && diag->has_key('source') && diag.source == 'Ruff'
    var code = diag['code']
    var explanation = systemlist("ruff rule " .. code)
    popup_atcursor(
      lsp#markdown#ParseMarkdown(explanation).content, {maxwidth: 80, padding: [0, 1, 0, 1]}
    )
  else
    echo "No ruff diagnostic found"
  endif
enddef

def PythonJump(mode: string, motion: string, flags: string, count: number, startofline=true): void
    if mode == 'x'
        normal! gv
    endif

    if startofline
        normal! 0
    endif

    mark '
    var cnt = count
    while cnt > 0
        search(motion, flags)
        cnt = cnt - 1
    endwhile

    if startofline
        normal! ^
    endif
enddef

def SetupPythonFileType(): void
  setlocal makeprg=ruff\ check\ --output-format\ concise\ --config\ ~/.ruff.toml\ --fix\ %

  nnoremap <silent><buffer> <leader>r :<C-U>vim9 <SID>ShowRuffRule()<CR>
  # previous and next function or class
  nnoremap <silent><buffer> [[ :<C-U>call <SID>PythonJump('n', '\v^\s*<((async )?def\|class)>', 'Wb', v:count1)<CR>
  onoremap <silent><buffer> [[ :call <SID>PythonJump('n', '\v^\s*<((async )?def\|class)>', 'Wb', v:count1)<CR>
  xnoremap <silent><buffer> [[ :call <SID>PythonJump('n', '\v^\s*<((async )?def\|class)>', 'Wb', v:count1)<CR>
  nnoremap <silent><buffer> ]] :<C-U>call <SID>PythonJump('n', '\v^\s*<((async )?def\|class)>', 'W', v:count1)<CR>
  onoremap <silent><buffer> ]] :call <SID>PythonJump('n', '\v^\s*<((async )?def\|class)>', 'W', v:count1)<CR>
  xnoremap <silent><buffer> ]] :call <SID>PythonJump('n', '\v^\s*<((async )?def\|class)>', 'W', v:count1)<CR>
  # previous and next function only
  nnoremap <silent><buffer> [d :<C-U>call <SID>PythonJump('n', '\v^\s*<(async )?def>', 'Wb', v:count1)<CR>
  onoremap <silent><buffer> [d :call <SID>PythonJump('n', '\v^\s*<(async )?def>', 'Wb', v:count1)<CR>
  xnoremap <silent><buffer> [d :call <SID>PythonJump('n', '\v^\s*<(async )?def>', 'Wb', v:count1)<CR>
  nnoremap <silent><buffer> ]d :<C-U>call <SID>PythonJump('n', '\v^\s*<(async )?def>', 'W', v:count1)<CR>
  onoremap <silent><buffer> ]d :call <SID>PythonJump('n', '\v^\s*<(async )?def>', 'W', v:count1)<CR>
  xnoremap <silent><buffer> ]d :call <SID>PythonJump('n', '\v^\s*<(async )?def>', 'W', v:count1)<CR>
  # previous and next class only
  nnoremap <silent><buffer> [c :<C-U>call <SID>PythonJump('n', '\v^\s*<class>', 'Wb', v:count1)<CR>
  onoremap <silent><buffer> [c :call <SID>PythonJump('n', '\v^\s*<class>', 'Wb', v:count1)<CR>
  xnoremap <silent><buffer> [c :call <SID>PythonJump('n', '\v^\s*<class>', 'Wb', v:count1)<CR>
  nnoremap <silent><buffer> ]c :<C-U>call <SID>PythonJump('n', '\v^\s*<class>', 'W', v:count1)<CR>
  onoremap <silent><buffer> ]c :call <SID>PythonJump('n', '\v^\s*<class>', 'W', v:count1)<CR>
  xnoremap <silent><buffer> ]c :call <SID>PythonJump('n', '\v^\s*<class>', 'W', v:count1)<CR>
enddef

au FileType python call SetupPythonFileType()
# vim:ts=2:sw=2
