# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
# vim:ft=sh

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# If running in tmux ensure the env is updated for each prompt
if [ -n "$TMUX" ]; then
    PROMPT_COMMAND='eval $(tmux showenv -s)'
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# expand directory name instead of escaping $ when completing from variables
shopt -s direxpand

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\e[01;32m\]\u@\h\[\e[00m\]:\[\e[01;34m\]\w\[\e[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# Preserve virtual env tag in PS1
if [ -n "$VIRTUAL_ENV" ]; then
    PATH=${PATH/$VIRTUAL_ENV\/bin:/}
    . $VIRTUAL_ENV/bin/activate
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
    xterm*|rxvt*) PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h:\w\a\]$PS1";;
    tmux*) PS1="\[\e]2;\w\a\]$PS1";;
esac

# Set prompt, input and command markers in case terminal support OSC 133
# Taken from https://gitlab.gnome.org/GNOME/vte/-/blob/master/src/vte.sh.in
if [[ "$PS1" != *\]133\;* ]]; then
	# Enclose the primary prompt between
	# ← OSC 133;D;retval ST (report exit status of previous command)
	# ← OSC 133;A ST (mark beginning of prompt)
	# → OSC 133;B ST (mark end of prompt, beginning of command line)
	PS1='\[\e]133;D;$?\e\\\e]133;A\e\\\]'"$PS1"'\[\e]133;B\e\\\]'

	# Prepend OSC 133;L ST for a conditional newline if the previous
	# command's output didn't end in one.
	# This is not done here by default, in order to provide the default
	# visual behavior of shells. Uncomment if you want this feature.
	#PS1='\[\e]133;L\e\\\]'"$PS1"

	# iTerm2 doesn't touch the secondary prompt.
	# Konsole encloses it between 133;A and 133;B.
	# For efficient jumping between commands, we follow iTerm2 by default
	# and don't mark PS2 as prompt. Uncomment if you want to mark it.
	#PS2='\[\e]133;A\e\\\]'"$PS2"'\[\e]133;B\e\\\]'

	# Mark the beginning of the command's output by OSC 133;C ST.
	# '\r' ensures that the kernel's cooked mode has the right idea of
	# the column, important for handling TAB followed by BS keypresses.
	# Prepend to the user's PS0 to preserve whether it ends in '\r'.
	# Note that bash doesn't support the \[ \] markers here.
	PS0='\e]133;C\e\\\r'"$PS0"
fi

# Limit expansion of \w and \W to 3 directories
PROMPT_DIRTRIM=3

export PYTHONSTARTUP=$HOME/.pythonrc.py
export EDITOR=`which vim`

function tmux {
    if [ -z "$*" ]; then
        `which tmux` attach
    else
        `which tmux` "$@"
    fi
}

function activate {
    eval `~/.dotfiles/python/venv_switcher.py`
}

function reactivate {
    deactivate
    activate
}

if [ -f ~/.bash_local ]; then
    . ~/.bash_local
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

for completion in ~/.bash_completions.d/*; do
    . $completion
done
